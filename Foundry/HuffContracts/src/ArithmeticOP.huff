#define function addTwo(uint256,uint256) view returns(uint256)
#define function subTwo(uint256,uint256) view returns(uint256)
// PrimerValor - SegundoValor
#define function mulTwo(uint256,uint256) view returns(uint256)
#define function divTwo(uint256,uint256) view returns(uint256)

// OPCODES REFERENCE: https://ethervm.io/
        
#define macro MAIN() = takes(0) returns(0) {

    // Get the function selector
    0x00
    calldataload
    0xE0
    shr

    // dispatch
    dup1 __FUNC_SIG(addTwo) eq addTwo jumpi
    dup1 __FUNC_SIG(subTwo) eq subTwo jumpi
    dup1 __FUNC_SIG(mulTwo) eq mulTwo jumpi
    dup1 __FUNC_SIG(divTwo) eq divTwo jumpi

    addTwo:
        ADD_TWO()

    subTwo:
        SUB_TWO()
    
    mulTwo:
        MUL_TWO()

    divTwo:
        DIV_TWO()

    0x00 0x00 revert
}

#define macro ADD_TWO() = takes(0) returns(0) {
    0x04 calldataload     // load first 32 bytes onto the stack - number 1
    0x24 calldataload     // load second 32 bytes onto the stack - number 2
    add                   // add number 1 and 2 and put the result onto the stack

    0x00 mstore           // place the result in memory
    0x20 0x00 return      // return the result
}

#define macro SUB_TWO() = takes(0) returns(0) {
    0x04 calldataload     // load first 32 bytes onto the stack - number 1
    0x24 calldataload     // load second 32 bytes onto the stack - number 2
    swap1                 // swap the top of the stack with the second element
    sub                   // number1 - number2 (without swap, it will be number2 - number1)

    0x00 mstore           // place the result in memory
    0x20 0x00 return      // return the result
}

#define macro MUL_TWO() = takes(0) returns(0) {
    0x04 calldataload     // load first 32 bytes onto the stack - number 1
    0x24 calldataload     // load second 32 bytes onto the stack - number 2
    mul                   // mul number 1 and 2 and put the result onto the stack

    0x00 mstore           // place the result in memory
    0x20 0x00 return      // return the result
}

#define macro DIV_TWO() = takes(0) returns(0) {
    0x04 calldataload     // load first 32 bytes onto the stack - number 1
    0x24 calldataload     // load second 32 bytes onto the stack - number 2
    swap1                 // swap the top of the stack with the second element
    div                   // number1 // number2 (without swap, it will be number2 // number1)

    0x00 mstore           // place the result in memory
    0x20 0x00 return      // return the result
}